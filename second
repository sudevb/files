import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.MethodParameter;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

import java.lang.reflect.Field;
import java.time.LocalDate;

@ControllerAdvice
public class CurrentDateModifierAdvice implements ResponseBodyAdvice<Object> {

    @Override
    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {
        // This means we apply it to all controller responses
        return true;
    }

    @Override
    public Object beforeBodyWrite(Object body,
                                  MethodParameter returnType,
                                  MediaType selectedContentType,
                                  Class<? extends HttpMessageConverter<?>> selectedConverterType,
                                  ServerHttpRequest request,
                                  ServerHttpResponse response) {

        if (body == null) return null;

        try {
            Field currentDateField = findCurrentDateField(body);
            if (currentDateField != null) {
                currentDateField.setAccessible(true);
                Object currentValue = currentDateField.get(body);

                if (currentValue instanceof LocalDate) {
                    LocalDate original = (LocalDate) currentValue;
                    currentDateField.set(body, original.plusDays(1));
                }
            }
        } catch (Exception e) {
            // Log it if needed, or silently ignore
            e.printStackTrace();
        }

        return body;
    }

    private Field findCurrentDateField(Object body) {
        Class<?> clazz = body.getClass();
        while (clazz != null) {
            for (Field field : clazz.getDeclaredFields()) {
                if ("currentDate".equals(field.getName()) && field.getType().equals(LocalDate.class)) {
                    return field;
                }
            }
            clazz = clazz.getSuperclass(); // in case it's inherited
        }
        return null;
    }
}
