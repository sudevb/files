import org.springframework.http.server.ServletServerHttpRequest;
import javax.servlet.http.HttpServletRequest;

...

@Override
public Object beforeBodyWrite(Object body,
                              MethodParameter returnType,
                              MediaType selectedContentType,
                              Class<? extends HttpMessageConverter<?>> selectedConverterType,
                              ServerHttpRequest request,
                              ServerHttpResponse response) {

    int offset = 1; // default if offset param is missing or invalid

    // Step 1: Extract 'offset' query param from request
    if (request instanceof ServletServerHttpRequest servletRequest) {
        HttpServletRequest httpRequest = servletRequest.getServletRequest();
        String offsetParam = httpRequest.getParameter("offset");

        if (offsetParam != null) {
            try {
                offset = Integer.parseInt(offsetParam);
            } catch (NumberFormatException e) {
                System.out.println("Invalid offset parameter: " + offsetParam + ", using default: " + offset);
            }
        }
    }

    // Step 2: Proceed with previous logic using `offset` instead of hardcoded 1
    if (body instanceof ResponseDto responseDto) {
        Object data = responseDto.getData();

        if (data instanceof List<?> dataList) {
            for (Object item : dataList) {
                if (item == null) continue;

                try {
                    Field currentDateField = findCurrentDateField(item);
                    if (currentDateField != null) {
                        currentDateField.setAccessible(true);
                        Object currentValue = currentDateField.get(item);

                        if (currentValue instanceof String dateStr) {
                            LocalDate parsed = LocalDate.parse(dateStr, ISO_DATE);
                            String newDateStr = parsed.plusDays(offset).format(ISO_DATE);
                            currentDateField.set(item, newDateStr);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    return body;
}
